// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CANDLESTICKS_ARC_H_
#define FLATBUFFERS_GENERATED_CANDLESTICKS_ARC_H_

#include "flatbuffers/flatbuffers.h"

namespace arc {

struct Candlestick;

struct Candlesticks;
struct CandlesticksBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Candlestick FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t datetime_;
  float open_;
  float high_;
  float low_;
  float close_;
  double volume_;

 public:
  Candlestick()
      : datetime_(0),
        open_(0),
        high_(0),
        low_(0),
        close_(0),
        volume_(0) {
  }
  Candlestick(int64_t _datetime, float _open, float _high, float _low, float _close, double _volume)
      : datetime_(flatbuffers::EndianScalar(_datetime)),
        open_(flatbuffers::EndianScalar(_open)),
        high_(flatbuffers::EndianScalar(_high)),
        low_(flatbuffers::EndianScalar(_low)),
        close_(flatbuffers::EndianScalar(_close)),
        volume_(flatbuffers::EndianScalar(_volume)) {
  }
  int64_t datetime() const {
    return flatbuffers::EndianScalar(datetime_);
  }
  void mutate_datetime(int64_t _datetime) {
    flatbuffers::WriteScalar(&datetime_, _datetime);
  }
  float open() const {
    return flatbuffers::EndianScalar(open_);
  }
  void mutate_open(float _open) {
    flatbuffers::WriteScalar(&open_, _open);
  }
  float high() const {
    return flatbuffers::EndianScalar(high_);
  }
  void mutate_high(float _high) {
    flatbuffers::WriteScalar(&high_, _high);
  }
  float low() const {
    return flatbuffers::EndianScalar(low_);
  }
  void mutate_low(float _low) {
    flatbuffers::WriteScalar(&low_, _low);
  }
  float close() const {
    return flatbuffers::EndianScalar(close_);
  }
  void mutate_close(float _close) {
    flatbuffers::WriteScalar(&close_, _close);
  }
  double volume() const {
    return flatbuffers::EndianScalar(volume_);
  }
  void mutate_volume(double _volume) {
    flatbuffers::WriteScalar(&volume_, _volume);
  }
};
FLATBUFFERS_STRUCT_END(Candlestick, 32);

struct Candlesticks FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CandlesticksBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STICKS = 4
  };
  const flatbuffers::Vector<const arc::Candlestick *> *sticks() const {
    return GetPointer<const flatbuffers::Vector<const arc::Candlestick *> *>(VT_STICKS);
  }
  flatbuffers::Vector<const arc::Candlestick *> *mutable_sticks() {
    return GetPointer<flatbuffers::Vector<const arc::Candlestick *> *>(VT_STICKS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STICKS) &&
           verifier.VerifyVector(sticks()) &&
           verifier.EndTable();
  }
};

struct CandlesticksBuilder {
  typedef Candlesticks Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sticks(flatbuffers::Offset<flatbuffers::Vector<const arc::Candlestick *>> sticks) {
    fbb_.AddOffset(Candlesticks::VT_STICKS, sticks);
  }
  explicit CandlesticksBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Candlesticks> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Candlesticks>(end);
    return o;
  }
};

inline flatbuffers::Offset<Candlesticks> CreateCandlesticks(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const arc::Candlestick *>> sticks = 0) {
  CandlesticksBuilder builder_(_fbb);
  builder_.add_sticks(sticks);
  return builder_.Finish();
}

inline flatbuffers::Offset<Candlesticks> CreateCandlesticksDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<arc::Candlestick> *sticks = nullptr) {
  auto sticks__ = sticks ? _fbb.CreateVectorOfStructs<arc::Candlestick>(*sticks) : 0;
  return arc::CreateCandlesticks(
      _fbb,
      sticks__);
}

inline const arc::Candlesticks *GetCandlesticks(const void *buf) {
  return flatbuffers::GetRoot<arc::Candlesticks>(buf);
}

inline const arc::Candlesticks *GetSizePrefixedCandlesticks(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<arc::Candlesticks>(buf);
}

inline Candlesticks *GetMutableCandlesticks(void *buf) {
  return flatbuffers::GetMutableRoot<Candlesticks>(buf);
}

inline bool VerifyCandlesticksBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<arc::Candlesticks>(nullptr);
}

inline bool VerifySizePrefixedCandlesticksBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<arc::Candlesticks>(nullptr);
}

inline void FinishCandlesticksBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<arc::Candlesticks> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCandlesticksBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<arc::Candlesticks> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace arc

#endif  // FLATBUFFERS_GENERATED_CANDLESTICKS_ARC_H_
